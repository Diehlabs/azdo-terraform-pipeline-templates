parameters:
- name: vault_approle_name
  type: string

- name: vault_token
  type: string

- name: vault_ttl
  type: string
  default: "500s"

steps:
- bash: |
    if [ ! -n "$VAULT_TOKEN" ]; then
      echo "No Vault token was passed in? Value received:"
      echo "$VAULT_TOKEN"
    fi

    req_url="${VAULT_ADDR}/v1/auth/approle/role/${VAULT_APPROLE_NAME}/secret-id"
    echo "Creating 1 time use secret ID for approle ${VAULT_APPROLE_NAME} at URL:"
    echo $req_url
    echo "Vault token TTL: ${VAULT_TTL}"

    WRAP_RESPONSE=$(curl \
      --retry 5 \
      --retry-delay 0 \
      --retry-max-time 10 \
      --silent \
      --header "X-Vault-Token: ${VAULT_TOKEN}" \
      --header "X-Vault-Wrap-TTL: ${VAULT_TTL}" \
      --request POST \
    "$req_url")

    token_accessor="$(echo "$WRAP_RESPONSE" | jq -C .wrap_info.accessor)"
    if [ ! -n "$token_accessor" ]; then
      echo "Unable to get token accessor."
      echo "$WRAP_RESPONSE" | jq -C .
      exit 1
    fi

    req_errors="$(echo "$WRAP_RESPONSE" | jq -C .errors)"
    if [ -n "$req_errors" ]; then
      echo "Token accessor: $(echo "$WRAP_RESPONSE" | jq -C .wrap_info.accessor)"
      echo "##vso[task.setvariable variable=WRAPPED_RESPONSE_TOKEN;isoutput=true]$(echo "$WRAP_RESPONSE" | jq -r .wrap_info.token)"
    else
      echo "Errors present:"
      echo "$WRAP_RESPONSE" | jq -C .
      exit 1
    fi

  env:
    VAULT_TOKEN: ${{ parameters.vault_token }}
    VAULT_APPROLE_NAME: ${{ parameters.vault_approle_name }}
    VAULT_TTL: ${{ parameters.vault_ttl }}
  displayName: Vault create 1 time use secret ID
  name: create_secid
